/* tslint:disable */
// generated by typescript-json-validator
import { inspect } from 'util';
import Ajv = require('ajv');
import { Pedido } from '../types/createInvoice';
export const ajv = new Ajv({
  allErrors: true,
  coerceTypes: false,
  format: 'fast',
  nullable: true,
  unicode: true,
  uniqueItems: true,
  useDefaults: true,
});

ajv.addMetaSchema(require('ajv/lib/refs/json-schema-draft-06.json'));

export { Pedido };
export const PedidoSchema = {
  $schema: 'http://json-schema.org/draft-07/schema#',
  defaultProperties: [],
  definitions: {
    Cliente: {
      defaultProperties: [],
      description: 'Interface do campo cliente dentro da NF',
      properties: {
        bairro: {
          type: 'string',
        },
        cep: {
          type: 'string',
        },
        cidade: {
          type: 'string',
        },
        complemento: {
          type: 'string',
        },
        contribuinte: {
          $ref: '#/definitions/TipoContribuinte',
        },
        cpf_cnpj: {
          type: 'string',
        },
        email: {
          type: 'string',
        },
        endereco: {
          type: 'string',
        },
        fone: {
          type: 'string',
        },
        ie_rg: {
          type: 'string',
        },
        nome: {
          type: 'string',
        },
        numero: {
          type: 'string',
        },
        pais: {
          type: 'string',
        },
        tipo_pessoa: {
          $ref: '#/definitions/TipoPessoa',
        },
        uf: {
          type: 'string',
        },
      },
      required: [
        'bairro',
        'cep',
        'cidade',
        'contribuinte',
        'cpf_cnpj',
        'email',
        'endereco',
        'nome',
        'numero',
        'tipo_pessoa',
        'uf',
      ],
      type: 'object',
    },
    DocReferenciado: {
      defaultProperties: [],
      description: 'Interface do documento Ref',
      properties: {
        chave_acesso: {
          type: 'string',
        },
        coo: {
          type: 'string',
        },
        data: {
          type: 'string',
        },
        modelo: {
          $ref: '#/definitions/ModeloDoc',
        },
        numero: {
          type: 'string',
        },
        serie: {
          type: 'string',
        },
      },
      required: ['modelo'],
      type: 'object',
    },
    Etiqueta: {
      defaultProperties: [],
      description: 'Interface do campo Etiqueta',
      properties: {
        bairro: {
          type: 'string',
        },
        cep: {
          type: 'string',
        },
        endereco: {
          type: 'string',
        },
        municipio: {
          type: 'string',
        },
        nome: {
          type: 'string',
        },
        numero: {
          type: 'string',
        },
        uf: {
          type: 'string',
        },
      },
      type: 'object',
    },
    Item: {
      defaultProperties: [],
      description: 'Interface do campo item',
      properties: {
        cest: {
          type: 'string',
        },
        class_fiscal: {
          type: 'string',
        },
        cod_servico: {
          type: 'string',
        },
        codigo: {
          type: 'string',
        },
        descricao: {
          type: 'string',
        },
        informacoes_adicionais: {
          type: 'string',
        },
        numero_pedido_compra: {
          type: 'string',
        },
        origem: {
          type: 'string',
        },
        peso_bruto: {
          type: 'string',
        },
        peso_liq: {
          type: 'string',
        },
        qtde: {
          type: 'string',
        },
        tipo: {
          type: 'string',
        },
        un: {
          type: 'string',
        },
        vlr_unit: {
          type: 'string',
        },
      },
      required: [
        'descricao',
        'informacoes_adicionais',
        'origem',
        'qtde',
        'tipo',
        'un',
        'vlr_unit',
      ],
      type: 'object',
    },
    ModeloDoc: {
      description: 'Enum de modelo para DocReferenciado',
      enum: [1, 2, '2D', 4, 55, 65],
    },
    NotaFiscalRuralReferenciada: {
      defaultProperties: [],
      description:
        'Interface da Nota Fiscal Do Produtor Rural Referenciada para o Pedido',
      properties: {
        ano_mes_emissao: {
          type: 'string',
        },
        numero: {
          type: 'string',
        },
        serie: {
          type: 'string',
        },
      },
      type: 'object',
    },
    Parcela: {
      defaultProperties: [],
      description: 'Interface da Parcela',
      properties: {
        parcela: {
          defaultProperties: [],
          properties: {
            data: {
              type: 'string',
            },
            dias: {
              type: 'string',
            },
            forma: {
              type: 'string',
            },
            obs: {
              type: 'string',
            },
            vlr: {
              type: 'string',
            },
          },
          type: 'object',
        },
      },
      required: ['parcela'],
      type: 'object',
    },
    TipoContribuinte: {
      description: 'Enum tipo de contribuinte para cliente',
      enum: [1, 2, 9],
      type: 'number',
    },
    TipoPessoa: {
      description: 'Enum tipo de pessoa para cliente',
      enum: ['E', 'F', 'J'],
      type: 'string',
    },
    Transporte: {
      defaultProperties: [],
      description: 'Interface do campo transporte',
      properties: {
        cidade: {
          type: 'string',
        },
        cpf_cnpj: {
          type: 'string',
        },
        dados_etiqueta: {
          $ref: '#/definitions/Etiqueta',
        },
        endereco: {
          type: 'string',
        },
        especie: {
          type: 'string',
        },
        ie_rg: {
          type: 'string',
        },
        marca: {
          type: 'string',
        },
        numero: {
          type: 'string',
        },
        peso_bruto: {
          type: 'string',
        },
        peso_liquido: {
          type: 'string',
        },
        placa: {
          type: 'string',
        },
        qtde_volumes: {
          type: 'string',
        },
        servico_correios: {
          type: 'string',
        },
        tipo_frete: {
          type: 'string',
        },
        transportadora: {
          type: 'string',
        },
        uf: {
          type: 'string',
        },
        uf_veiculo: {
          type: 'string',
        },
        volumes: {
          items: {
            $ref: '#/definitions/Volume',
          },
          type: 'array',
        },
      },
      required: ['cpf_cnpj', 'dados_etiqueta', 'transportadora'],
      type: 'object',
    },
    Volume: {
      defaultProperties: [],
      description: 'Interface de um volume',
      properties: {
        volume: {
          defaultProperties: [],
          properties: {
            codigoRastreamento: {
              type: 'string',
            },
            servico: {
              type: 'string',
            },
          },
          required: ['servico'],
          type: 'object',
        },
      },
      required: ['volume'],
      type: 'object',
    },
  },
  description: 'Interface do pedido',
  properties: {
    cliente: {
      $ref: '#/definitions/Cliente',
    },
    data_operacao: {
      type: 'string',
    },
    doc_referenciado: {
      $ref: '#/definitions/DocReferenciado',
      description: 'Interface do documento Ref',
    },
    finalidade: {
      description: 'Enum de modelo para DocReferenciado',
      enum: [1, 2, 3, 4],
      type: 'number',
    },
    items: {
      items: {
        $ref: '#/definitions/Item',
      },
      type: 'array',
    },
    loja: {
      type: 'string',
    },
    nat_operacao: {
      type: 'string',
    },
    nf_produtor_rural_referenciada: {
      $ref: '#/definitions/NotaFiscalRuralReferenciada',
      description:
        'Interface da Nota Fiscal Do Produtor Rural Referenciada para o Pedido',
    },
    numero_loja: {
      type: 'string',
    },
    numero_nf: {
      type: 'string',
    },
    obs: {
      type: 'string',
    },
    parcelas: {
      items: {
        $ref: '#/definitions/Parcela',
      },
      type: 'array',
    },
    tipo: {
      description: 'Enum de tipo para Pedido',
      enum: ['E', 'S'],
      type: 'string',
    },
    transporte: {
      $ref: '#/definitions/Transporte',
    },
    vlr_desconto: {
      type: 'string',
    },
    vlr_despesas: {
      type: 'string',
    },
    vlr_frete: {
      type: 'string',
    },
    vlr_seguro: {
      type: 'string',
    },
  },
  required: ['cliente', 'items', 'transporte'],
  type: 'object',
};
export type ValidateFunction<T> = ((data: unknown) => data is T) &
  Pick<Ajv.ValidateFunction, 'errors'>;
export const isPedido = ajv.compile(PedidoSchema) as ValidateFunction<Pedido>;
export default function validate(value: unknown): Pedido {
  if (isPedido(value)) {
    return value;
  } else {
    throw new Error(
      ajv.errorsText(
        isPedido.errors!.filter((e: any) => e.keyword !== 'if'),
        { dataVar: 'Pedido' }
      ) +
        '\n\n' +
        inspect(value)
    );
  }
}
